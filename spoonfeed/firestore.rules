rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidRecipe() {
      let recipe = request.resource.data;
      return recipe.title.size() > 0 
        && recipe.description.size() > 0
        && recipe.ingredients.size() > 0
        && recipe.steps.size() > 0
        && recipe.userId == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.uid == userId
        && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Recipes collection
    match /recipes/{recipeId} {
      allow read: if true; // Public access for feed
      allow create: if isAuthenticated() && isValidRecipe();
      allow update: if isAuthenticated() 
        && (isOwner(resource.data.userId) 
        || (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['likes', 'comments', 'shares'])));
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Comments collection
    match /recipes/{recipeId}/comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() 
        && isOwner(resource.data.userId);
    }

    // User-specific collections
    match /users/{userId}/followers/{followerId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    match /users/{userId}/following/{followingId} {
      allow read: if true;
      allow write: if isAuthenticated() 
        && request.auth.uid == userId;
    }

    // Videos collection
    match /videos/{videoId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      
      // Likes subcollection
      match /likes/{likeId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
    }
  }
}