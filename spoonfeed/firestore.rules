rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidRecipe() {
      let recipe = request.resource.data;
      return recipe.title.size() > 0 
        && recipe.description.size() > 0
        && recipe.ingredients.size() > 0
        && recipe.steps.size() > 0
        && recipe.userId == request.auth.uid;
    }

    // Cookbooks collection
    match /cookbooks/{cookbookId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;

      // Videos subcollection in cookbooks
      match /videos/{videoId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() 
          && get(/databases/$(database)/documents/cookbooks/$(cookbookId)).data.userId == request.auth.uid;
      }
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update, delete: if isOwner(userId);
    }

    // Recipes collection
    match /recipes/{recipeId} {
      allow read: if true; // Public access for feed
      allow create: if isAuthenticated() && isValidRecipe();
      allow update: if isAuthenticated() 
        && (isOwner(resource.data.userId) 
        || (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['likes', 'comments', 'shares'])));
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Comments collection
    match /recipes/{recipeId}/comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() 
        && isOwner(resource.data.userId);
    }

    // User-specific collections
    match /users/{userId}/followers/{followerId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    match /users/{userId}/following/{followingId} {
      allow read: if true;
      allow write: if isAuthenticated() 
        && request.auth.uid == userId;
    }

    // Videos collection
    match /videos/{videoId} {
      function isValidVideo() {
        let video = request.resource.data;
        return video.keys().hasAll([
          'videoUrl', 'thumbnailUrl', 'title', 'description', 
          'duration', 'fileSize', 'status', 'userId',
          'createdAt', 'updatedAt', 'views', 'likes', 
          'shares', 'comments', 'resolution'
        ])
        && video.title is string && video.title.size() > 0
        && video.description is string
        && video.duration is number && video.duration > 0
        && video.fileSize is number && video.fileSize > 0
        && video.status in ['uploading', 'active', 'processing', 'error', 'thumbnail_error']
        && video.videoUrl is string  // Just require it to be a string
        && video.userId == request.auth.uid;
      }

      allow read: if true;
      allow create: if isAuthenticated() && isValidVideo();
      allow update: if isAuthenticated() 
        && (
          // Allow owner to update any fields during upload
          (resource.data.userId == request.auth.uid && resource.data.status == 'uploading')
          // Allow owner to update specific fields after upload
          || (resource.data.userId == request.auth.uid 
              && request.resource.data.diff(resource.data).affectedKeys()
                  .hasOnly(['videoUrl', 'status', 'updatedAt']))
          // Allow public updates for engagement metrics
          || request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['views', 'likes', 'shares', 'comments', 'highestGameScore', 'pinnedCommentId', 'lastCommentAt'])
        );
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      
      // Likes subcollection
      match /likes/{userId} {
        allow read: if true;
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }

      // Comments subcollection
      match /comments/{commentId} {
        function isValidComment() {
          let comment = request.resource.data;
          return comment.keys().hasAll(['text', 'userId', 'videoId', 'createdAt'])
            && comment.text is string && comment.text.size() > 0
            && comment.userId == request.auth.uid
            && comment.videoId == videoId;
        }

        function isValidPinnedComment() {
          let comment = request.resource.data;
          let video = get(/databases/$(database)/documents/videos/$(videoId)).data;
          let currentHighScore = video.highestGameScore;
          return comment.keys().hasAll(['gameScore', 'isPinned', 'wasPinned'])
            && comment.gameScore is number
            && (currentHighScore == null || comment.gameScore > currentHighScore)
            && comment.isPinned is bool
            && comment.wasPinned is bool;
        }

        allow read: if true;
        allow create: if isAuthenticated() && isValidComment();
        allow update: if isAuthenticated() 
          && (resource.data.userId == request.auth.uid
              || (request.resource.data.diff(resource.data).affectedKeys()
                  .hasOnly(['isPinned', 'wasPinned', 'gameScore', 'comments'])));
        allow delete: if isAuthenticated() 
          && resource.data.userId == request.auth.uid;
      }

      // Allow updating comment count on the video document
      allow update: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid
            || (request.resource.data.diff(resource.data).affectedKeys()
                .hasOnly(['comments', 'lastCommentAt'])));
    }

    // Game scores collection
    match /game_scores/{userId} {
      allow read: if true;
      allow create, update: if isAuthenticated() && request.auth.uid == userId;
    }

    match /transcripts/{transcriptId} {
      function isValidTranscript() {
        let transcript = request.resource.data;
        return transcript.keys().hasAll([
          'segments', 'metadata', 'isProcessing'
        ])
        && transcript.segments is list
        && transcript.metadata.keys().hasAll(['language', 'lastAccessed', 'version'])
        && transcript.metadata.language is string
        && transcript.metadata.version is number
        && transcript.isProcessing is bool
        && (transcript.segments.size() == 0 || transcript.segments.hasAll([
          'start', 'end', 'text', 'words'
        ]));
      }

      allow read: if true;  // Transcripts are public
      allow create: if isAuthenticated() 
        && isValidTranscript()
        && (request.resource.data.isProcessing == true 
            || request.auth.token.admin == true);
      allow update: if isAuthenticated()
        && isValidTranscript()
        && (
          resource.data.isProcessing == true 
          || request.auth.token.admin == true
          || (request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['metadata.lastAccessed']))
        );
      allow delete: if isAuthenticated()
        && request.auth.token.admin == true;
    }
  }
}